name: Deploy React App
on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: divulgaif-vps
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: Build React app
        run: npm run build
        
      - name: Determine deployment directory
        id: deployment
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "target_dir=/var/www/divulgaif" >> $GITHUB_OUTPUT
          else
            echo "target_dir=/var/www/dev-divulgaif" >> $GITHUB_OUTPUT
          fi
        
      - name: Clean deployment directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            rm -rf ${{ steps.deployment.outputs.target_dir }}/*
            mkdir -p ${{ steps.deployment.outputs.target_dir }}
            echo "Preparing to copy files..."
            
      - name: Copy build files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "build/*"
          target: "${{ steps.deployment.outputs.target_dir }}"
          strip_components: 1
          
      - name: Set permissions and reload Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            chmod -R 755 ${{ steps.deployment.outputs.target_dir }}
            chown -R www-data:www-data ${{ steps.deployment.outputs.target_dir }}
            sudo systemctl reload nginx
